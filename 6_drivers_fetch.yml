target_default: 6_drivers_fetch

packages:
  - sp
  - scipiper
  - dplyr
  - ncdf4
  - stringr

sources:
  - 6_drivers/src/nldas_cube_utils.R
  - 6_drivers/src/nldas_feather_utils.R

targets:
  6_drivers_fetch:
    depends:
      - "6_drivers/log/nc/6_fetch_new_cubes_tasks.ind"
      # - append_cubes # how to make a task plan that can be empty?
      - "6_drivers/log/feather/6_fetch_new_cell_tasks.ind"

  replete_time_range:
    command: c(t0=I(0), t1 = I(346848))

  append_time_range:
    command: nldas_times_diff(replete_time_range, '6_drivers/in/nldas_times.rds')

  nccopy_time_stride:
    command: c(I(25000))

  cube_data_dir:
    command: c(I("6_drivers/out/nc"))

  cube_ind_dir:
    command: c(I("6_drivers/log/nc"))

  cell_data_dir:
    command: c(I("6_drivers/out/feather"))

  cell_ind_dir:
    command: c(I("6_drivers/log/feather"))

  nldas_cells:
    command: list(x=I(c(221,221,344,344,223,244,239)), y=I(c(132,196,132,196,141,144,156)), variables=I(c('dlwrfsfc','pressfc','apcpsfc','vgrd10m','ugrd10m','dswrfsfc','spfh2m','tmp2m'))) # will come from code or spatial data...

  nldas_empty_box: # this is the domain that will require a FULL data pull in the time dimension
    command: nldas_diff_box(nldas_cells, '6_drivers/in/nldas_cells.rds')

  nldas_partial_box: # this is the domain that will require a PARTIAL time pull, where partial time could be 0 (complete)
    command: nldas_update_box(nldas_cells, nldas_empty_box)

  nldas_new_cube_files:
    command: calc_nldas_files(nldas_empty_box, replete_time_range, nccopy_time_stride, nc_dir = cube_data_dir)

  nldas_append_cube_files:
    command: calc_nldas_files(nldas_partial_box, append_time_range, nccopy_time_stride, nc_dir = cube_data_dir)

  nldas_new_cells:
    command: nldas_diff_cells(nldas_cells, '6_drivers/in/nldas_cells.rds')

  nldas_append_cells:
    command: nldas_update_cells(nldas_cells, nldas_new_cells, '6_drivers/in/nldas_times.rds')

  nldas_new_cube_plan:
    command: create_cube_task_plan(nldas_new_cube_files, ind_dir = cube_ind_dir)

  nldas_append_cube_plan:
    command: create_cube_task_plan(nldas_append_cube_files, ind_dir = cube_ind_dir)

  "6_fetch_new_cubes_tasks.yml":
    command: create_cube_task_makefile(target_name, nldas_new_cube_plan)

  "6_fetch_append_cubes_tasks.yml":
    command: create_cube_task_makefile(target_name, nldas_append_cube_plan)

  "6_drivers/log/nc/6_fetch_new_cubes_tasks.ind":
    command: loop_tasks(task_plan = nldas_new_cube_plan, task_makefile = "6_fetch_new_cubes_tasks.yml")

  "6_drivers/log/nc/6_fetch_append_cubes_tasks.ind":
    command: loop_tasks(task_plan = nldas_append_cube_plan, task_makefile = "6_fetch_append_cubes_tasks.yml")

  new_cell_plan:
    command: create_cell_task_plan(nldas_new_cells, replete_time_range, nldas_new_cube_files,
      cell_data_dir = cell_data_dir, cell_ind_dir = cell_ind_dir,
      cube_data_dir = cube_data_dir, cube_ind_dir = cube_ind_dir)

  append_cell_plan:
    command: create_update_cell_task_plan(nldas_append_cells, replete_time_range, nldas_append_cube_files,
      cell_data_dir = cell_data_dir, cell_ind_dir = cell_ind_dir,
      cube_data_dir = cube_data_dir, cube_ind_dir = cube_ind_dir, secondary_cube_files = nldas_new_cube_files)

  "6_fetch_new_cell_tasks.yml":
    command: create_cell_task_makefile(target_name, new_cell_plan)

  "6_fetch_append_cell_tasks.yml":
    command: create_cell_task_makefile(target_name, append_cell_plan)

  "6_drivers/log/feather/6_fetch_new_cell_tasks.ind":
    command: loop_tasks(task_plan = new_cell_plan, task_makefile = "6_fetch_new_cell_tasks.yml")

  "6_drivers/log/feather/6_fetch_append_cell_tasks.ind":
    command: loop_tasks(task_plan = append_cell_plan, task_makefile = "6_fetch_append_cell_tasks.yml")
