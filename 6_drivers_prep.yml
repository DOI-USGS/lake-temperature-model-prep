target_default: 6_drivers_prep

packages:
  - sp
  - scipiper
  - dplyr

sources:
  - 6_drivers/src/nldas_cube_utils.R
  - 6_drivers/src/nldas_feather_utils.R
  
targets:
  6_drivers_prep: 
    depends: 
      - new_cubes
      - append_cubes
  
  replete_time_range:
    command: c(t0=I(0), t1 = I(345551))
    
  append_time_range:
    command: nldas_times_diff(replete_time_range, '6_drivers/in/nldas_times.rds')
    
  nccopy_time_stride:
    command: c(I(5000))
    
  nldas_cells:
    command: list(x=I(c(221,221,344,344,223)), y=I(c(132,196,132,196,141)), variables=I(c('dlwrfsfc','pressfc','apcpsfc','vgrd10m','ugrd10m','dswrfsfc','spfh2m','tmp2m'))) # will come from code or spatial data...
      
  nldas_empty_box: # this is the domain that will require a FULL data pull in the time dimension
    command: nldas_diff_box(nldas_cells, '6_drivers/in/nldas_cells.rds') 

  nldas_partial_box: # this is the domain that will require a PARTIAL time pull, where partial time could be 0 (complete)
    command: nldas_update_box(nldas_cells, nldas_empty_box) 

  nldas_new_cube_files:
    command: calc_nldas_files(nldas_empty_box, replete_time_range, nccopy_time_stride)
  
  nldas_append_cube_files:
    command: calc_nldas_files(nldas_partial_box, append_time_range, nccopy_time_stride)
  
  nldas_new_cells:
    command: nldas_diff_cells(nldas_cells, '6_drivers/in/nldas_cells.rds') 
    
  nldas_append_cells:
    command: nldas_update_cells(nldas_cells, nldas_new_cells, '6_drivers/in/nldas_times.rds')
  
  nldas_new_cube_plan:
    command: create_cube_task_plan(nldas_new_cube_files, nc_dir = I("6_drivers/out"), ind_dir=I('6_drivers/log'))

  nldas_append_cube_plan:
    command: create_cube_task_plan(nldas_append_cube_files, nc_dir = I("6_drivers/out"), ind_dir=I('6_drivers/log'))

  "6_fetch_new_cubes_tasks.yml":
    command: create_cube_task_makefile(target_name, nldas_new_cube_plan, include = I("6_drivers_prep.yml"), packages = I(c('dplyr','ncdf4')), sources = '6_drivers/src/nccopy_utils.R')
    
  "6_fetch_append_cubes_tasks.yml":
    command: create_cube_task_makefile(target_name, nldas_append_cube_plan, include = I("6_drivers_pre.yml"), packages = I(c('dplyr','ncdf4')), sources = '6_drivers/src/nccopy_utils.R')  
  
  new_cubes:
    command: loop_tasks(task_plan = nldas_new_cube_plan, task_makefile = "6_fetch_new_cubes_tasks.yml")
    
  append_cubes:
    command: loop_tasks(task_plan = nldas_append_cube_plan, task_makefile = "6_fetch_append_cubes_tasks.yml")
  
  #nldas_pull_
